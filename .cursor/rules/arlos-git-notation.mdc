---
description: 
globs: 
alwaysApply: false
---
@rule
name: arlos-git-notation
description: Standardized Git commit message format

## Commit Message Format
All commit messages should follow this format:

```
<type>(<scope>): <subject>

<body>

<footer>
```

### Type
Must be one of the following:
- `feat`: A new feature
- `fix`: A bug fix
- `docs`: Documentation only changes
- `style`: Changes that do not affect the meaning of the code (white-space, formatting, etc)
- `refactor`: A code change that neither fixes a bug nor adds a feature
- `perf`: A code change that improves performance
- `test`: Adding missing or correcting existing tests
- `chore`: Changes to the build process or auxiliary tools and libraries

### Scope
The scope is optional and should be the name of the module affected (as perceived by the person reading the changelog).

### Subject
The subject contains a succinct description of the change:
- Use the imperative, present tense: "change" not "changed" nor "changes"
- Don't capitalize the first letter
- No period (.) at the end

### Body
The body should include the motivation for the change and contrast this with previous behavior.

### Footer
The footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit closes.

## Examples
```
feat(auth): add login page

Add user authentication with JWT tokens and form validation
```

```
fix(api): handle null responses properly

Closes #123
```

```
docs(readme): update installation instructions
```
